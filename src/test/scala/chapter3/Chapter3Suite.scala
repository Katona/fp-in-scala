package chapter3

/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */

import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class Chapter3Suite extends FunSuite {

  test("play around") {
    val x = Cons(1, Cons(2, Cons(3, Nil)))
    println(x)
    val y = List(1, 2, 3)
    println(y)

    val z = List(1, 2, 3) match {
      case Cons(_, t) => t
    }
    println(z)
  }

  test("test pattern matching") {
    val x = List(1, 2, 3, 4, 5) match {
      case Cons(e, Cons(2, Cons(4, _))) => e
      case Nil => 42
      case Cons(e, Cons(y, Cons(3, Cons(4, _)))) => e + y
      case _ => 101
    }

    assert(x == 3)
  }

  test("tail") {
    assert(Excercise2.tail(Nil) == Nil)
    assert(Excercise2.tail(List(1)) == Nil)
    assert(Excercise2.tail(List(1, 2, 3)) == List(2, 3))
  }

  test("setHead") {
    assert(Excercise3.setHead(List(1, 2), 5) == List(5, 2))
  }

  test("drop") {
    assert(Excercise3.drop(Nil, 1) == Nil)
    assert(Excercise3.drop(List(1), 1) == Nil)
    assert(Excercise3.drop(List(1, 2, 3), 1) == List(2, 3))
    assert(Excercise3.drop(List(1, 2, 3, 4, 5), 2) == List(3, 4, 5))
  }

  test("dropWhile") {
    assert(Excercise4.dropWhile(Nil)(_ => true) == Nil)
    assert(Excercise4.dropWhile(List(1))(_ => true) == Nil)
    assert(Excercise4.dropWhile(List(1))(_ => false) == List(1))
    assert(Excercise4.dropWhile(List(1, 2, 3, 4, 5))(_ => true) == Nil)
    assert(Excercise4.dropWhile(List(1, 2, 3, 4, 5))(_ => false) == List(1, 2, 3, 4, 5))
    assert(Excercise4.dropWhile(List(1, 2, 3, 4, 5))(i => i < 3 ) == List(3, 4, 5))
  }

  test("init") {
    assert(Excercise5.init(List(1, 2)) == List(1))
    assert(Excercise5.init(List(1, 2, 3, 4, 5)) == List(1, 2, 3, 4))
  }
}