package chapter4

/*
 * This Scala Testsuite was generated by the Gradle 'init' task.
 */

import org.junit.runner.RunWith
import org.scalatest.FunSuite
import org.scalatest.junit.JUnitRunner

@RunWith(classOf[JUnitRunner])
class Chapter4Suite extends FunSuite {
  test("Some.map") {
      val intOption = Some(1)
      assert(intOption.map(i => i.toString) == Some("1"))
  }

  test("Some.flatMap") {
      val intOption = Some(1)
      assert(intOption.flatMap(i => Some(i.toString)) == Some("1"))
      assert(intOption.flatMap(i => None) == None)
  }

  test("Some.getOrElse") {
      val intOption = Some(1)
      assert(intOption.getOrElse(2) == 1)
  }

  test("Some.orElse") {
      val intOption = Some(1)
      assert(intOption.orElse(Some(2)) == Some(1))
  }

  test("Some.filter") {
      val intOption = Some(1)
      assert(intOption.filter(_ => true) == Some(1))
      assert(intOption.filter(_ => false) == None)
  }

  test("None.map") {
      val none = None
      assert(none.map(i => i.toString) == None)
  }

  test("None.flatMap") {
      val none = None
      assert(none.flatMap(i => Some(i.toString)) == None)
  }

  test("None.getOrElse") {
      val none = None
      assert(none.getOrElse(2) == 2)
  }

  test("None.orElse") {
      val none = None
      assert(none.orElse(Some(2)) == Some(2))
  }

  test("None.filter") {
      val none = None
      assert(none.filter(_ => true) == None)
      assert(none.filter(_ => false) == None)
  }

  test("Excercise2 - variance") {
      assert(Excercise2.variance(Seq(2, 2, 2)) == Some(0))
      assert(Excercise2.variance(Seq()) == None)
  }

  test("Excercise3 - map") {
      assert(Excercise3.map2[Int, Int, Int](Some(2), Some(3))(_ + _) == Some(5))
      assert(Excercise3.map2[Int, Int, Int](None, Some(3))(_ + _) == None)
  }
}